[{"prompt": "please give me a fully functioning unit test for each mask function in the masks.py file", "response": "Here are some unit tests you could write for each of the `mask` functions in your `masks.py` file. Please note that these are just examples, and actual tests may need to be modified based on specific requirements.\n\n```Python\nimport unittest\r\nfrom masks import binary_mask, r_squared_mask, x_squared_masks, theta_mask\r\n\r\nclass TestMasks(unittest.TestCase):\r\n\r\n    def test_binary_mask(self):\r\n        # Testing binary mask\r\n        self.assertTrue(binary_mask((1, 2), 3))  # Test center point\r\n        self.assertFalse(binary_mask((0.5, 1.5), 2))  # Test on edge\r\n        self.assertFalse(binary_mask((-1, -2), 2))  # Test outside\r\n\r\n    def test_r_squared_mask(self):\r\n        # Testing r-squared mask\r\n        self.assertTrue(r_squared_mask((1, 2), 3))  # Test center point\r\n        self.assertFalse(r_squared_mask((0.5, 1.5), 2))  # Test on edge\r\n        self.assertFalse(r_squared_mask((-1, -2), 2))  # Test outside\r\n\r\n    def test_x_squared_masks(self):\r\n        # Testing x-squared masks\r\n        result = x_squared_masks((1, 2), 3)\r\n        self.assertTrue(np.all(result == 0))  # Test center point\r\n        result = x_squared_masks((0.5, 1.5), 2)\r\n        self.assertFalse(np.all(result == 0))  # Test on edge\r\n        result = x_squared_masks((-1, -2), 2)\r\n        self.assertFalse(np.all(result == 0))  # Test outside\r\n\r\n    def test_theta_mask(self):\r\n        # Testing theta mask\r\n        for angle in range(360):  # Test all angles\r\n            self.assertTrue(theta_mask((1, 2)))  # Test center point\r\n        for angle in range(-180, 181):  # Test on edge and outside\r\n            self.assertFalse(theta_mask((0.5, 1.5)))\r\n            self.assertFalse(theta_mask((-1, -2)))\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n```"}]